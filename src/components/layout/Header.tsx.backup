import React, { useState } from 'react';
import { 
  AppBar, 
  Toolbar, 
  Typography, 
  Button, 
  IconButton, 
  Menu, 
  MenuItem, 
  Box, 
  Avatar, 
  Divider,
  useMediaQuery,
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Tooltip
} from '@mui/material';
import { useTheme as useMuiTheme } from '@mui/material/styles';
import {
  Menu as MenuIcon,
  Notifications as NotificationsIcon,
  DarkMode as DarkModeIcon,
  LightMode as LightModeIcon,
  Dashboard as DashboardIcon,
  Person as ProfileIcon,
  Event as EventIcon,
  HelpOutline as WikiIcon,
  ContactSupportOutlined as ContactIcon,
  ExitToApp as LogoutIcon,
  AccountCircle as ResumeIcon,
  Home as HomeIcon,
  KeyboardArrowDown as KeyboardArrowDownIcon,
  MonetizationOn as SponsorshipIcon,
  Storage as DataIcon,
  EmojiEvents as StandingIcon,
  People as PeopleIcon
} from '@mui/icons-material';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { useTheme } from '../../contexts/ThemeContext';
import { UserRole } from '../../types';
import NotificationCenter from '../notifications/NotificationCenter';
import TicketNotificationBadge from '../notifications/TicketNotificationBadge';

const Header: React.FC = () => {
  const { user, logout } = useAuth();
  const { mode, toggleMode } = useTheme();
  const muiTheme = useMuiTheme();
  const navigate = useNavigate();
  const location = useLocation();
  const isMobile = useMediaQuery(muiTheme.breakpoints.down('md'));

  // User menu
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const openUserMenu = Boolean(anchorEl);
  
  // Mobile drawer
  const [drawerOpen, setDrawerOpen] = useState(false);
  
  // Notification menu
  const [notificationAnchorEl, setNotificationAnchorEl] = useState<null | HTMLElement>(null);
  const openNotifications = Boolean(notificationAnchorEl);

  const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  const handleLogout = () => {
    handleMenuClose();
    logout();
    navigate('/login');
  };

  const toggleDrawer = (open: boolean) => {
    setDrawerOpen(open);
  };

  const handleNotificationOpen = (event: React.MouseEvent<HTMLElement>) => {
    setNotificationAnchorEl(event.currentTarget);
  };

  const handleNotificationClose = () => {
    setNotificationAnchorEl(null);
  };

  // Define the main navigation items
  const mainNavItems = [
    { 
      title: 'Home', 
      path: user ? (
        user.role === UserRole.ADMIN ? '/admin/dashboard' : 
        (user.role === UserRole.MANAGER || user.role === UserRole.SUB_MANAGER) ? '/manager/dashboard' : 
        '/dashboard'
      ) : '/dashboard', 
      icon: <HomeIcon />,
      roles: [UserRole.CREATOR, UserRole.MANAGER, UserRole.SUB_MANAGER, UserRole.ADMIN]
    },
    { 
      title: 'Creator Profile', 
      path: '/creator-profile', 
      icon: <ProfileIcon />,
      roles: [UserRole.CREATOR]
    },
    { 
      title: 'Profile', 
      path: '/profile', 
      icon: <ProfileIcon />,
      roles: [UserRole.MANAGER, UserRole.SUB_MANAGER, UserRole.ADMIN]
    },
    { 
      title: 'Events', 
      path: '/events', 
      icon: <EventIcon />,
      roles: [UserRole.CREATOR, UserRole.MANAGER, UserRole.SUB_MANAGER, UserRole.ADMIN]
    },
    { 
      title: 'Bonus Rules', 
      path: '/bonus-rules', 
      icon: <SponsorshipIcon />,
      roles: [UserRole.CREATOR, UserRole.MANAGER, UserRole.SUB_MANAGER, UserRole.ADMIN]
    },
    { 
      title: 'Wiki', 
      path: '/wiki', 
      icon: <WikiIcon />,
      roles: [UserRole.CREATOR]
    },
    { 
      title: 'Contact', 
      path: '/contact', 
      icon: <ContactIcon />,
      roles: [UserRole.CREATOR, UserRole.MANAGER, UserRole.SUB_MANAGER, UserRole.ADMIN]
    }
  ];

  // Management navigation items for managers and admins
  const managementNavItems = [
    { 
      title: 'Creators', 
      path: '/creators', 
      icon: <ProfileIcon />,
      roles: [UserRole.ADMIN, UserRole.MANAGER, UserRole.SUB_MANAGER]
    },
    {
      title: 'Tickets',
      path: '/manager/tickets',
      icon: <ContactIcon />,
      roles: [UserRole.MANAGER, UserRole.SUB_MANAGER]
    }
  ];

  // Admin-only navigation items
  const adminNavItems = [
    {
      title: 'Campaign Management',
      path: '/campaign-management',
      icon: <DashboardIcon />,
      roles: [UserRole.ADMIN]
    },
    {
      title: 'Rules Management',
      path: '/rules-management',
      icon: <DashboardIcon />,
      roles: [UserRole.ADMIN]
    },
    {
      title: 'Manage Creators',
      path: '/admin/creators',
      icon: <ProfileIcon />,
      roles: [UserRole.ADMIN]
    },
    {
      title: 'Manage Managers',
      path: '/admin/managers',
      icon: <ProfileIcon />,
      roles: [UserRole.ADMIN]
    },
    {
      title: 'Manage Companies',
      path: '/admin/companies',
      icon: <DashboardIcon />,
      roles: [UserRole.ADMIN]
    },
    {
      title: 'Tickets',
      path: '/admin/tickets',
      icon: <ContactIcon />,
      roles: [UserRole.ADMIN]
    },
    {
      title: 'Data Management',
      path: '/admin/data-management',
      icon: <DataIcon />,
      roles: [UserRole.ADMIN]
    }
  ];

  // Combine and filter navigation items based on user role
  const allNavItems = [...mainNavItems];
  
  if (user && (user.role === UserRole.MANAGER || user.role === UserRole.SUB_MANAGER || user.role === UserRole.ADMIN)) {
    allNavItems.push(...managementNavItems.filter(item => item.roles.includes(user.role)));
  }
  
  if (user && user.role === UserRole.ADMIN) {
    allNavItems.push(...adminNavItems);
  }

  const filteredNavItems = allNavItems.filter(item => 
    user && item.roles.includes(user.role)
  );

  const drawer = (
    <Box onClick={() => toggleDrawer(false)} sx={{ width: 250 }}>
      <Box sx={{ p: 2 }}>
        <Typography variant="h6" component="div">
          TikTok Agency
        </Typography>
      </Box>
      <Divider />
      <List>
        {filteredNavItems.map((item) => (
          <ListItem
            component={Link}
            to={item.path}
            key={item.title}
            sx={{ 
              cursor: 'pointer',
              bgcolor: location.pathname === item.path ? 'rgba(0, 0, 0, 0.08)' : 'transparent'
            }}
          >
            <ListItemIcon>
              {item.icon}
            </ListItemIcon>
            <ListItemText primary={item.title} />
          </ListItem>
        ))}
      </List>
      <Divider />
      <List>
        <ListItem
          onClick={handleLogout}
          sx={{ cursor: 'pointer' }}
        >
          <ListItemIcon>
            <LogoutIcon />
          </ListItemIcon>
          <ListItemText primary="Logout" />
        </ListItem>
      </List>
    </Box>
  );

  return (
    <AppBar 
      position="static" 
      color="primary" 
      elevation={1}
      sx={{ 
        color: 'white'
      }}
    >
      <Toolbar>
        {isMobile ? (
          <>
            <IconButton
              edge="start"
              color="inherit"
              aria-label="menu"
              onClick={() => toggleDrawer(true)}
              sx={{ mr: 2 }}
            >
              <MenuIcon />
            </IconButton>
            <Drawer
              anchor="left"
              open={drawerOpen}
              onClose={() => toggleDrawer(false)}
            >
              {drawer}
            </Drawer>
          </>
        ) : null}
        
        <Typography
          variant="h6"
          component={Link}
          to="/"
          sx={{
            flexGrow: 1,
            textDecoration: 'none',
            color: 'inherit',
            display: 'flex',
            alignItems: 'center'
          }}
        >
          TikTok Agency
        </Typography>

        {!isMobile && user && (
          <Box sx={{ display: 'flex' }}>
            {filteredNavItems.map((item) => (
              <Button
                key={item.title}
                component={Link}
                to={item.path}
                sx={{ 
                  mx: 1,
                  color: 'white',
                  position: 'relative',
                  '&::after': {
                    content: '""',
                    position: 'absolute',
                    bottom: 0,
                    left: 0,
                    width: location.pathname === item.path ? '100%' : '0%',
                    height: '3px',
                    backgroundColor: 'white',
                    transition: 'width 0.3s ease'
                  },
                  '&:hover::after': {
                    width: '100%'
                  }
                }}
                startIcon={item.icon}
              >
                {item.title}
              </Button>
            ))}
          </Box>
        )}

        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <IconButton onClick={toggleMode} color="inherit">
            {mode === 'dark' ? <LightModeIcon /> : <DarkModeIcon />}
          </IconButton>
          
          {user && (
            <>
              <Box sx={{ display: 'flex', gap: 1 }}>
                <TicketNotificationBadge />
                
                <NotificationCenter />
              </Box>
              
              {/* Manager Profile Info in Navbar */}
              {(user.role === 'manager' || user.role === 'sub_manager') && !isMobile && (
                <Box sx={{ display: 'flex', alignItems: 'center', mx: 2, color: 'white' }}>
                  <Box sx={{ textAlign: 'right', mr: 1 }}>
                    <Typography variant="body2" sx={{ fontSize: '0.85rem', fontWeight: 'bold' }}>
                      {user.role === 'manager' ? 'Sarah Johnson' : 'Mike Davis'}
                    </Typography>
                    <Typography variant="body2" sx={{ fontSize: '0.7rem', opacity: 0.8 }}>
                      {user.role === 'manager' ? 'Senior Manager' : 'Sub-Manager'} • ID: {user.role === 'manager' ? 'TPA-001' : 'TPA-002'}
                    </Typography>
                  </Box>
                </Box>
              )}
              
              <IconButton
                onClick={handleProfileMenuOpen}
                size="small"
                sx={{ ml: 1 }}
                aria-controls={openUserMenu ? 'account-menu' : undefined}
                aria-haspopup="true"
                aria-expanded={openUserMenu ? 'true' : undefined}
              >
                <Avatar sx={{ width: 32, height: 32, bgcolor: 'white', color: '#6200ea' }}>
                  {user.username.charAt(0).toUpperCase()}
                </Avatar>
              </IconButton>
            </>
          )}
        </Box>

        <Menu
          id="profile-menu"
          anchorEl={anchorEl}
          open={openUserMenu}
          onClose={handleMenuClose}
          MenuListProps={{
            'aria-labelledby': 'profile-button',
          }}
          PaperProps={{
            elevation: 3,
            sx: {
              mt: 1,
              width: user?.role === 'manager' || user?.role === 'sub_manager' ? 280 : 200,
              borderRadius: 2,
              overflow: 'visible',
              '&:before': {
                content: '""',
                display: 'block',
                position: 'absolute',
                top: 0,
                right: 14,
                width: 10,
                height: 10,
                bgcolor: 'background.paper',
                transform: 'translateY(-50%) rotate(45deg)',
                zIndex: 0,
              },
            },
          }}
          transformOrigin={{ horizontal: 'right', vertical: 'top' }}
          anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
        >
          {/* Profile Header */}
          <Box sx={{ px: 2, py: 1.5, borderBottom: '1px solid #e0e0e0' }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>
              <Avatar sx={{ width: 40, height: 40, bgcolor: '#6200ea' }}>
                {user?.username?.charAt(0).toUpperCase()}
              </Avatar>
              <Box>
                <Typography variant="subtitle2" fontWeight="bold">
                  {user?.role === 'manager' ? 'Sarah Johnson' :
                   user?.role === 'sub_manager' ? 'Mike Davis' : 
                   user?.username || 'User'}
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.75rem' }}>
                  {user?.role === 'manager' ? 'Senior Manager' :
                   user?.role === 'sub_manager' ? 'Sub-Manager' :
                   user?.role === 'admin' ? 'Administrator' : 'Creator'}
                </Typography>
                {(user?.role === 'manager' || user?.role === 'sub_manager') && (
                  <Typography variant="body2" color="primary" sx={{ fontSize: '0.7rem', fontWeight: 'bold' }}>
                    ID: {user?.role === 'manager' ? 'TPA-001' : 'TPA-002'}
                  </Typography>
                )}
              </Box>
            </Box>
          </Box>

          {/* Manager-specific quick stats */}
          {(user?.role === 'manager' || user?.role === 'sub_manager') && (
            <Box sx={{ px: 2, py: 1, borderBottom: '1px solid #e0e0e0', bgcolor: '#f8f9fa' }}>
              <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.7rem', mb: 0.5 }}>
                Quick Stats
              </Typography>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: 1 }}>
                <Box sx={{ textAlign: 'center' }}>
                  <Typography variant="body2" fontWeight="bold" sx={{ fontSize: '0.9rem' }}>
                    {user?.role === 'manager' ? '15' : '8'}
                  </Typography>
                  <Typography variant="body2" sx={{ fontSize: '0.65rem', color: 'text.secondary' }}>
                    {user?.role === 'manager' ? 'Managed' : 'Assigned'}
                  </Typography>
                </Box>
                {user?.role === 'manager' && (
                  <Box sx={{ textAlign: 'center' }}>
                    <Typography variant="body2" fontWeight="bold" sx={{ fontSize: '0.9rem' }}>
                      2.8M
                    </Typography>
                    <Typography variant="body2" sx={{ fontSize: '0.65rem', color: 'text.secondary' }}>
                      Diamonds
                    </Typography>
                  </Box>
                )}
                <Box sx={{ textAlign: 'center' }}>
                  <Typography variant="body2" fontWeight="bold" sx={{ fontSize: '0.9rem', color: '#4caf50' }}>
                    {user?.role === 'manager' ? '98%' : '94%'}
                  </Typography>
                  <Typography variant="body2" sx={{ fontSize: '0.65rem', color: 'text.secondary' }}>
                    {user?.role === 'manager' ? 'Success' : 'Completion'}
                  </Typography>
                </Box>
              </Box>
            </Box>
          )}

          {/* Profile Menu Items */}
          <MenuItem component={Link} to="/profile" onClick={handleMenuClose}>
            <ListItemIcon>
              <ProfileIcon fontSize="small" />
            </ListItemIcon>
            <ListItemText>
              <Typography variant="body2">Profile Settings</Typography>
            </ListItemText>
          </MenuItem>
          
          {(user?.role === 'manager' || user?.role === 'sub_manager') ? (
            <>
              <MenuItem component={Link} to="/manager/dashboard" onClick={handleMenuClose}>
                <ListItemIcon>
                  <DashboardIcon fontSize="small" />
                </ListItemIcon>
                <ListItemText>
                  <Typography variant="body2">Manager Dashboard</Typography>
                </ListItemText>
              </MenuItem>
              
              <MenuItem component={Link} to="/creators" onClick={handleMenuClose}>
                <ListItemIcon>
                  <PeopleIcon fontSize="small" />
                </ListItemIcon>
                <ListItemText>
                  <Typography variant="body2">
                    {user?.role === 'manager' ? 'My Creators' : 'Assigned Creators'}
                  </Typography>
                </ListItemText>
              </MenuItem>
            </>
          ) : user?.role !== 'admin' ? (
            <MenuItem component={Link} to="/resume" onClick={handleMenuClose}>
              <ListItemIcon>
                <ResumeIcon fontSize="small" />
              </ListItemIcon>
              <ListItemText>
                <Typography variant="body2">My Resume</Typography>
              </ListItemText>
            </MenuItem>
          ) : null}
          
          <Divider />
          <MenuItem onClick={handleLogout}>
            <ListItemIcon>
              <LogoutIcon fontSize="small" />
            </ListItemIcon>
            <ListItemText>
              <Typography variant="body2">Logout</Typography>
            </ListItemText>
          </MenuItem>
        </Menu>
      </Toolbar>
    </AppBar>
  );
};

export default Header; 