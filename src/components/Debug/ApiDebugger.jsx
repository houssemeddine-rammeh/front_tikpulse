import React, { useState, useEffect } from 'react';
import { buildApiUrl, getApiHeaders } from '../../config/api';
import './ApiDebugger.css';

const ApiDebugger = () => {
  const [responses, setResponses] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  const addResponse = (response) => {
    setResponses(prev => [response, ...prev].slice(0, 10)); // Keep last 10 responses
  };

  const testEndpoint = async (endpoint, method = 'GET', data = null) => {
    const url = buildApiUrl(endpoint);
    const timestamp = new Date().toISOString();
    
    try {
      const options = {
        method,
        headers: getApiHeaders()
      };
      
      if (data && method === 'POST') {
        options.body = JSON.stringify(data);
      }

      console.log(`🔍 Testing ${method} ${url}`);
      const response = await fetch(url, options);
      const responseData = await response.json();
      
      addResponse({
        url,
        method,
        status: response.status,
        success: response.ok,
        data: responseData,
        timestamp
      });
      
      console.log(`✅ Response:`, responseData);
    } catch (error) {
      console.error(`❌ Error:`, error);
      addResponse({
        url,
        method,
        status: 0,
        success: false,
        error: error.message,
        timestamp
      });
    }
  };

  const runFullTest = async () => {
    setIsLoading(true);
    setResponses([]);
    
    // Test health endpoint
    await testEndpoint('/health');
    
    // Test analytics
    await testEndpoint('/api/v1/analytics/overview');
    
    // Test get events
    await testEndpoint('/api/v1/events');
    
    // Test create event
    await testEndpoint('/api/v1/events', 'POST', {
      title: `Debug Test Event ${new Date().getTime()}`,
      description: 'Generated by API Debugger',
      date: new Date().toISOString(),
      location: 'Debug Test'
    });
    
    // Test get events again to see if it was created
    await testEndpoint('/api/v1/events');
    
    // Test get content
    await testEndpoint('/api/v1/content');
    
    setIsLoading(false);
  };

  useEffect(() => {
    // Auto-run test on component mount
    runFullTest();
  }, []);

  return (
    <div className="api-debugger">
      <div className="debugger-header">
        <h2>🔧 API Debugger</h2>
        <p>Testing connection between frontend and backend</p>
        <div className="config-info">
          <p><strong>Backend URL:</strong> {buildApiUrl('')}</p>
          <p><strong>Frontend URL:</strong> {window.location.origin}</p>
        </div>
      </div>

      <div className="debugger-controls">
        <button 
          onClick={runFullTest} 
          disabled={isLoading}
          className="test-button"
        >
          {isLoading ? '🔄 Testing...' : '🧪 Run Full Test'}
        </button>
        
        <button 
          onClick={() => setResponses([])} 
          className="clear-button"
        >
          🗑️ Clear Results
        </button>
      </div>

      <div className="quick-tests">
        <h3>Quick Tests</h3>
        <div className="test-buttons">
          <button onClick={() => testEndpoint('/health')}>Health Check</button>
          <button onClick={() => testEndpoint('/api/v1/events')}>Get Events</button>
          <button onClick={() => testEndpoint('/api/v1/content')}>Get Content</button>
          <button onClick={() => testEndpoint('/api/v1/analytics/overview')}>Analytics</button>
        </div>
      </div>

      <div className="responses">
        <h3>API Test Results ({responses.length})</h3>
        {responses.length === 0 && !isLoading && (
          <div className="no-responses">
            <p>No API tests run yet. Click "Run Full Test" to start.</p>
          </div>
        )}
        
        {responses.map((response, index) => (
          <div 
            key={index} 
            className={`response-item ${response.success ? 'success' : 'error'}`}
          >
            <div className="response-header">
              <span className="method-badge">{response.method}</span>
              <span className="url">{response.url}</span>
              <span className="status">{response.status}</span>
              <span className="timestamp">{new Date(response.timestamp).toLocaleTimeString()}</span>
            </div>
            
            {response.error && (
              <div className="error-message">
                <strong>Error:</strong> {response.error}
              </div>
            )}
            
            {response.data && (
              <div className="response-data">
                <details>
                  <summary>Response Data</summary>
                  <pre>{JSON.stringify(response.data, null, 2)}</pre>
                </details>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default ApiDebugger; 

