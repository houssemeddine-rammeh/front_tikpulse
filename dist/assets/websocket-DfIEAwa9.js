import{W as c}from"./index-Ffmecpj5.js";class i{constructor(){this.events={}}on(e,t){this.events[e]||(this.events[e]=[]),this.events[e].push(t)}emit(e,...t){this.events[e]&&this.events[e].forEach(s=>s.apply(this,t))}removeListener(e,t){this.events[e]&&(this.events[e]=this.events[e].filter(s=>s!==t))}removeAllListeners(e){e?delete this.events[e]:this.events={}}}class r extends i{constructor(e){super(),this.url=e||c,this.socket=null,this.isConnected=!1,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.reconnectInterval=3e3,this.messageHistory=new Map}connect(e,t){try{console.log("Attempting to connect to WebSocket server:",this.url),this.socket=new WebSocket(`${this.url}?userId=${e}&role=${t}`),this.socket.onopen=()=>{console.log("✅ WebSocket connected successfully"),this.isConnected=!0,this.reconnectAttempts=0,this.emit("connected",{userId:e,userRole:t})},this.socket.onmessage=s=>{try{const n=JSON.parse(s.data);console.log("📨 WebSocket message received:",n),n.channel&&this.saveMessageToHistory(n.channel,n),n.type?this.emit(n.type,n):this.emit("message",n)}catch(n){console.error("❌ Error parsing WebSocket message:",n)}},this.socket.onclose=s=>{console.log("🔌 WebSocket connection closed:",s.code,s.reason),this.isConnected=!1,this.emit("disconnected",s),s.code!==1e3&&this.reconnectAttempts<this.maxReconnectAttempts&&this.attemptReconnect(e,t)},this.socket.onerror=s=>{console.error("❌ WebSocket connection error:",s),this.emit("error",s)}}catch(s){console.error("❌ Failed to create WebSocket connection:",s),this.emit("error",s)}}attemptReconnect(e,t){this.reconnectAttempts++,console.log(`🔄 Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`),setTimeout(()=>{this.connect(e,t)},this.reconnectInterval)}sendMessage(e){if(!this.isConnected||!this.socket)throw console.warn("❌ WebSocket is not connected. Message not sent:",e),new Error("WebSocket not connected");try{const t={...e,timestamp:new Date().toISOString(),messageId:`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`};return console.log("📤 Sending WebSocket message:",t),this.socket.send(JSON.stringify(t)),t.channel&&this.saveMessageToHistory(t.channel,t),t}catch(t){throw console.error("❌ Error sending WebSocket message:",t),t}}joinChannel(e){return this.sendMessage({type:"join_channel",channel:e})}leaveChannel(e){return this.sendMessage({type:"leave_channel",channel:e})}sendChatMessage(e,t,s="text"){return this.sendMessage({type:"chat_message",channel:e,content:t,messageType:s})}joinTicketChannel(e){return this.joinChannel(`ticket-${e}`)}sendTicketMessage(e,t,s=[]){return this.sendMessage({type:"ticket_message",channel:`ticket-${e}`,ticketId:e,content:t,attachments:s})}saveMessageToHistory(e,t){this.messageHistory.has(e)||this.messageHistory.set(e,[]);const s=this.messageHistory.get(e);s.push(t),s.length>100&&s.shift()}getMessageHistory(e){return this.messageHistory.get(e)||[]}clearMessageHistory(e){e?this.messageHistory.delete(e):this.messageHistory.clear()}isConnectedToServer(){return this.isConnected&&this.socket&&this.socket.readyState===WebSocket.OPEN}disconnect(){this.socket&&(console.log("🔌 Manually disconnecting WebSocket"),this.isConnected=!1,this.socket.close(1e3,"Manual disconnect"),this.socket=null)}ping(){return this.sendMessage({type:"ping",timestamp:new Date().toISOString()})}getConnectionState(){if(!this.socket)return"DISCONNECTED";switch(this.socket.readyState){case WebSocket.CONNECTING:return"CONNECTING";case WebSocket.OPEN:return"CONNECTED";case WebSocket.CLOSING:return"CLOSING";case WebSocket.CLOSED:return"CLOSED";default:return"UNKNOWN"}}}new r;export{r as default};
